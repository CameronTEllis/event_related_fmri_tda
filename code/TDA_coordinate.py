# Make a single barcode from a given coordinate of a volume where each TR represents the off-diagonal element of distance matrix (generated by 'generate_node_dist')

import numpy as np
import nibabel
import os
import sys
from test_graph_structure import make_persistence

# What is the node_brain file you are running
brain_file = sys.argv[1]
coordinates = eval(sys.argv[2])
output_file = sys.argv[3]

# Load in the data
nii = nibabel.load(brain_file)  # Load the participant
dimsize=nii.header.get_zooms()
node_brain = nii.get_data()

# Pull out the distance vec for these coordinates
dist_vec = node_brain[coordinates[0], coordinates[1], coordinates[2], :]

# Unravel the data into a mat
nodes = int(np.ceil(np.sqrt(node_brain.shape[3] * 2))) 
distance_matrix = np.zeros((nodes, nodes))
x, y = np.triu_indices(nodes, 1)
distance_matrix[x, y] = dist_vec

# Make it symmetrical
distance_matrix = np.maximum(distance_matrix,
                             distance_matrix.transpose())

# Generate the barcode
barcode = make_persistence(distance_matrix)

np.save(output_file, barcode)