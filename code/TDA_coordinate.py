# Make a single barcode from a given coordinate of a volume where each TR represents the off-diagonal element of distance matrix (generated by 'generate_node_dist'). Alternatively, you can give the function the output of generate_node_brain and a mask and it will compute the distance matrix of that mask and then output the barcode

import numpy as np
import nibabel
import os
import sys
import scipy.spatial.distance as sp_distance
from test_graph_structure import make_persistence

# What is the node_brain file you are running
brain_file = sys.argv[1]

# Determine whether this is being run on a coordinate or a mask 
if sys.argv[2][0] == '[':
    coordinates = eval(sys.argv[2])
    is_mask = 0
else:
    mask_name = sys.argv[2]
    is_mask = 1
    
# Where is the output to go    
output_file = sys.argv[3]

# Load in the data
nii = nibabel.load(brain_file)  # Load the participant
dimsize=nii.header.get_zooms()
node_brain = nii.get_data()

# Pull out the distance vec for these coordinates
if is_mask == 0:
    dist_vec = node_brain[coordinates[0], coordinates[1], coordinates[2], :]
    nodes = int(np.ceil(np.sqrt(node_brain.shape[3] * 2))) 
else:
    mask = nibabel.load(mask_name).get_data()
    
    # Get the data shape
    mat = node_brain[mask == 1, :]
    
    print('Input data shape:', mat.shape)
    
    # Calculate the distance matrix
    distance_matrix = sp_distance.squareform(
        sp_distance.pdist(np.transpose(mat)))

    # Take the upper triangle of the distance matrix and turn it into a vector
    dist_vec = distance_matrix[np.triu_indices(distance_matrix.shape[0])]

    # Remove the diagonal
    dist_vec = dist_vec[dist_vec != 0]
    
    # How many nodes are there
    nodes = node_brain.shape[3]

print('Data shape:', dist_vec.shape)

# Unravel the data into a mat

distance_matrix = np.zeros((nodes, nodes))
x, y = np.triu_indices(nodes, 1)
distance_matrix[x, y] = dist_vec

# Make it symmetrical
distance_matrix = np.maximum(distance_matrix,
                             distance_matrix.transpose())

print('Distance matrix shape:', distance_matrix.shape)

# Generate the barcode
barcode = make_persistence(distance_matrix)

np.save(output_file, barcode)